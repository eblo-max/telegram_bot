from abc import ABC, abstractmethod
from typing import List, Optional
from dataclasses import dataclass

from dark_archive.domain.entities.case import Case
from dark_archive.domain.entities.evidence import Evidence
from dark_archive.domain.entities.location import Location
from dark_archive.domain.entities.suspect import Suspect
from dark_archive.domain.interfaces.message_service import Button, Message


class MessageFormatter(ABC):
    """–ë–∞–∑–æ–≤—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —Ñ–æ—Ä–º–∞—Ç—Ç–µ—Ä–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π"""

    @abstractmethod
    def format_case_details(self, case: Case) -> Message:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –¥–µ—Ç–∞–ª–∏ –¥–µ–ª–∞

        Args:
            case: –û–±—ä–µ–∫—Ç –¥–µ–ª–∞

        Returns:
            Message: –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        """
        pass

    @abstractmethod
    def format_evidence_list(self, evidence_list: List[Evidence]) -> Message:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–ø–∏—Å–æ–∫ —É–ª–∏–∫

        Args:
            evidence_list: –°–ø–∏—Å–æ–∫ —É–ª–∏–∫

        Returns:
            Message: –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        """
        pass

    @abstractmethod
    def format_location_details(
        self, location: Location, evidence: List[Evidence]
    ) -> Message:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –¥–µ—Ç–∞–ª–∏ –ª–æ–∫–∞—Ü–∏–∏

        Args:
            location: –û–±—ä–µ–∫—Ç –ª–æ–∫–∞—Ü–∏–∏
            evidence: –°–ø–∏—Å–æ–∫ —É–ª–∏–∫ –≤ –ª–æ–∫–∞—Ü–∏–∏

        Returns:
            Message: –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        """
        pass

    @abstractmethod
    def format_suspect_details(
        self, suspect: Suspect, evidence: List[Evidence]
    ) -> Message:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –¥–µ—Ç–∞–ª–∏ –ø–æ–¥–æ–∑—Ä–µ–≤–∞–µ–º–æ–≥–æ

        Args:
            suspect: –û–±—ä–µ–∫—Ç –ø–æ–¥–æ–∑—Ä–µ–≤–∞–µ–º–æ–≥–æ
            evidence: –°–ø–∏—Å–æ–∫ —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —É–ª–∏–∫

        Returns:
            Message: –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        """
        pass

    @abstractmethod
    def format_error(self, error: str) -> Message:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ

        Args:
            error: –¢–µ–∫—Å—Ç –æ—à–∏–±–∫–∏

        Returns:
            Message: –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        """
        pass


class MarkdownFormatter(MessageFormatter):
    """–§–æ—Ä–º–∞—Ç—Ç–µ—Ä —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Ñ–æ—Ä–º–∞—Ç–µ Markdown"""

    def format_case_details(self, case: Case) -> Message:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –¥–µ—Ç–∞–ª–∏ –¥–µ–ª–∞ –≤ Markdown"""
        text = (
            f"üìÅ *–î–µ–ª–æ #{case.id}*\n\n"
            f"*–ù–∞–∑–≤–∞–Ω–∏–µ:* {case.title}\n"
            f"*–û–ø–∏—Å–∞–Ω–∏–µ:* {case.description}\n\n"
            f"*–°–ª–æ–∂–Ω–æ—Å—Ç—å:* {case.difficulty}/10\n"
            f"*–°—Ç–∞—Ç—É—Å:* {case.status}\n"
            f"*–ü—Ä–æ–≥—Ä–µ—Å—Å:* {case.progress * 100:.1f}%\n\n"
            f"*–õ–æ–∫–∞—Ü–∏–∏:* {len(case.locations)}\n"
            f"*–£–ª–∏–∫–∏:* {len(case.evidence)}\n"
            f"*–ü–æ–¥–æ–∑—Ä–µ–≤–∞–µ–º—ã–µ:* {len(case.suspects)}\n"
        )

        if case.notes:
            text += "\n*–ó–∞–º–µ—Ç–∫–∏:*\n" + "\n".join(f"‚Ä¢ {note}" for note in case.notes)

        return Message(text=text, parse_mode="Markdown")

    def format_evidence_list(self, evidence_list: List[Evidence]) -> Message:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–ø–∏—Å–æ–∫ —É–ª–∏–∫ –≤ Markdown"""
        if not evidence_list:
            return Message(text="üîç *–£–ª–∏–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã*", parse_mode="Markdown")

        text = "üîç *–ù–∞–π–¥–µ–Ω–Ω—ã–µ —É–ª–∏–∫–∏:*\n\n"
        for ev in evidence_list:
            text += (
                f"*{ev.name}*\n"
                f"–¢–∏–ø: {ev.type.value}\n"
                f"–í–∞–∂–Ω–æ—Å—Ç—å: {ev.importance}/10\n"
                f"–û–ø–∏—Å–∞–Ω–∏–µ: {ev.description}\n"
            )
            if ev.notes:
                text += f"–ó–∞–º–µ—Ç–∫–∏: {ev.notes}\n"
            text += "\n"

        return Message(text=text, parse_mode="Markdown")

    def format_location_details(
        self, location: Location, evidence: List[Evidence]
    ) -> Message:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –¥–µ—Ç–∞–ª–∏ –ª–æ–∫–∞—Ü–∏–∏ –≤ Markdown"""
        text = (
            f"üìç *{location.name}*\n\n"
            f"*–û–ø–∏—Å–∞–Ω–∏–µ:* {location.description}\n"
            f"*–£—Ä–æ–≤–µ–Ω—å —Ä–∏—Å–∫–∞:* {location.risk_level}/10\n\n"
        )

        if evidence:
            text += "*–ù–∞–π–¥–µ–Ω–Ω—ã–µ —É–ª–∏–∫–∏:*\n"
            for ev in evidence:
                text += f"‚Ä¢ {ev.name}\n"

        if location.notes:
            text += f"\n*–ó–∞–º–µ—Ç–∫–∏:*\n{location.notes}"

        return Message(text=text, parse_mode="Markdown")

    def format_suspect_details(
        self, suspect: Suspect, evidence: List[Evidence]
    ) -> Message:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –¥–µ—Ç–∞–ª–∏ –ø–æ–¥–æ–∑—Ä–µ–≤–∞–µ–º–æ–≥–æ –≤ Markdown"""
        text = (
            f"üë§ *{suspect.name}*\n\n"
            f"*–û–ø–∏—Å–∞–Ω–∏–µ:* {suspect.description}\n"
            f"*–°—Ç–∞—Ç—É—Å:* {suspect.status.value}\n"
            f"*–£—Ä–æ–≤–µ–Ω—å —Ä–∏—Å–∫–∞:* {suspect.risk_level}/10\n"
        )

        if suspect.alibi:
            text += f"\n*–ê–ª–∏–±–∏:* {suspect.alibi}"
        if suspect.motive:
            text += f"\n*–ú–æ—Ç–∏–≤:* {suspect.motive}"

        if evidence:
            text += "\n\n*–°–≤—è–∑–∞–Ω–Ω—ã–µ —É–ª–∏–∫–∏:*\n"
            for ev in evidence:
                text += f"‚Ä¢ {ev.name}\n"

        if suspect.notes:
            text += f"\n*–ó–∞–º–µ—Ç–∫–∏:*\n{suspect.notes}"

        return Message(text=text, parse_mode="Markdown")

    def format_error(self, error: str) -> Message:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –≤ Markdown"""
        return Message(text=f"‚ùå *–û—à–∏–±–∫–∞*\n\n{error}", parse_mode="Markdown")
