import logging
from typing import Dict, List, Optional
from uuid import UUID

from telegram import Update
from telegram.ext import ContextTypes

from dark_archive.application.services.case_service import CaseService
from dark_archive.domain.models.case import Case, CaseStatus, Location
from dark_archive.application.interfaces.ai_service import IAIService

logger = logging.getLogger(__name__)


class TelegramHandlers:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –¥–ª—è Telegram –±–æ—Ç–∞"""

    def __init__(self, case_service: CaseService, ai_service: IAIService):
        self.case_service = case_service
        self.ai_service = ai_service
        self._user_states: Dict[int, UUID] = {}  # user_id -> active_case_id

    async def start_command(
        self, update: Update, context: ContextTypes.DEFAULT_TYPE
    ) -> None:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        user_id = update.effective_user.id
        await update.message.reply_text(
            "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Dark Archive Bot!\n\n"
            "–Ø –ø–æ–º–æ–≥—É –≤–∞–º —Ä–∞—Å—Å–ª–µ–¥–æ–≤–∞—Ç—å –∑–∞–≥–∞–¥–æ—á–Ω—ã–µ –¥–µ–ª–∞. "
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–ª–µ–¥—É—é—â–∏–µ –∫–æ–º–∞–Ω–¥—ã:\n"
            "/new_case - –ù–∞—á–∞—Ç—å –Ω–æ–≤–æ–µ —Ä–∞—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ\n"
            "/cases - –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –¥–µ–ª\n"
            "/help - –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É"
        )

    async def help_command(
        self, update: Update, context: ContextTypes.DEFAULT_TYPE
    ) -> None:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
        await update.message.reply_text(
            "–°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥:\n\n"
            "/new_case - –ù–∞—á–∞—Ç—å –Ω–æ–≤–æ–µ —Ä–∞—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ\n"
            "/cases - –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –¥–µ–ª\n"
            "/case - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–µ–∫—É—â–µ–º –¥–µ–ª–µ\n"
            "/locations - –°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ª–æ–∫–∞—Ü–∏–π\n"
            "/evidence - –°–ø–∏—Å–æ–∫ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —É–ª–∏–∫\n"
            "/analyze <id> - –ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —É–ª–∏–∫—É\n"
            "/theory - –ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å —Ç–µ–æ—Ä–∏—é\n"
            "/hint - –ü–æ–ª—É—á–∏—Ç—å –ø–æ–¥—Å–∫–∞–∑–∫—É"
        )

    async def new_case_command(
        self, update: Update, context: ContextTypes.DEFAULT_TYPE
    ) -> None:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /new_case"""
        try:
            user_id = update.effective_user.id
            logger.info(f"Creating new case for user {user_id}")

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
            await update.message.reply_text(
                "üîç –ì–µ–Ω–µ—Ä–∏—Ä—É—é –Ω–æ–≤–æ–µ —Ä–∞—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ...", parse_mode="Markdown"
            )

            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤–æ–µ –¥–µ–ª–æ
            case = await self.case_service.create_case()

            if not case:
                logger.error("Failed to create case - case_service returned None")
                await update.message.reply_text(
                    "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –¥–µ–ª–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                    parse_mode="Markdown",
                )
                return

            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–∞–∫ –∞–∫—Ç–∏–≤–Ω–æ–µ –¥–µ–ª–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            self._user_states[user_id] = case.id

            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Å–æ–∑–¥–∞–Ω–Ω–æ–º –¥–µ–ª–µ
            case_message = (
                f"üìÅ *–ù–æ–≤–æ–µ –¥–µ–ª–æ —Å–æ–∑–¥–∞–Ω–æ!*\n\n"
                f"*–ù–∞–∑–≤–∞–Ω–∏–µ:* {case.title}\n"
                f"*–û–ø–∏—Å–∞–Ω–∏–µ:* {case.description}\n\n"
                f"*–°–ª–æ–∂–Ω–æ—Å—Ç—å:* {case.difficulty}/10\n"
                f"*–ù–∞—á–∞–ª—å–Ω–∞—è –ª–æ–∫–∞—Ü–∏—è:* {case.initial_location.name}\n\n"
                f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /case –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏."
            )

            await update.message.reply_text(case_message, parse_mode="Markdown")
            logger.info(f"Successfully created case {case.id} for user {user_id}")

        except Exception as e:
            logger.error(f"Error in new_case_command: {e}", exc_info=True)
            await update.message.reply_text(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –¥–µ–ª–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                parse_mode="Markdown",
            )

    async def cases_command(
        self, update: Update, context: ContextTypes.DEFAULT_TYPE
    ) -> None:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /cases"""
        cases = await self.case_service.get_cases_by_status(CaseStatus.IN_PROGRESS)
        if not cases:
            await update.message.reply_text("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ä–∞—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–π.")
            return

        cases_text = "–í–∞—à–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ —Ä–∞—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è:\n\n"
        for case in cases:
            cases_text += f"üìÅ {case.title}\n"
            cases_text += f"–°—Ç–∞—Ç—É—Å: {case.status.value}\n"
            cases_text += f"–°–ª–æ–∂–Ω–æ—Å—Ç—å: {case.difficulty}/10\n\n"

        await update.message.reply_text(cases_text)

    async def case_command(
        self, update: Update, context: ContextTypes.DEFAULT_TYPE
    ) -> None:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /case"""
        user_id = update.effective_user.id
        case_id = self._user_states.get(user_id)

        if not case_id:
            await update.message.reply_text(
                "–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ä–∞—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è.\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /new_case —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –Ω–æ–≤–æ–µ."
            )
            return

        case = await self.case_service.get_case(case_id)
        if not case:
            await update.message.reply_text(
                "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –¥–µ–ª–µ."
            )
            return

        discovered_locations = [loc for loc in case.locations if loc.discovered]
        discovered_evidence = [ev for ev in case.evidence if ev.discovered]

        case_text = f"üìÅ {case.title}\n\n"
        case_text += f"–û–ø–∏—Å–∞–Ω–∏–µ: {case.description}\n"
        case_text += f"–°—Ç–∞—Ç—É—Å: {case.status.value}\n"
        case_text += f"–°–ª–æ–∂–Ω–æ—Å—Ç—å: {case.difficulty}/10\n\n"
        case_text += (
            f"–ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–æ –ª–æ–∫–∞—Ü–∏–π: {len(discovered_locations)}/{len(case.locations)}\n"
        )
        case_text += f"–ù–∞–π–¥–µ–Ω–æ —É–ª–∏–∫: {len(discovered_evidence)}/{len(case.evidence)}\n"

        await update.message.reply_text(case_text)

    async def locations_command(
        self, update: Update, context: ContextTypes.DEFAULT_TYPE
    ) -> None:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /locations"""
        user_id = update.effective_user.id
        case_id = self._user_states.get(user_id)

        if not case_id:
            await update.message.reply_text(
                "–°–Ω–∞—á–∞–ª–∞ –Ω–∞—á–Ω–∏—Ç–µ —Ä–∞—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ —Å –ø–æ–º–æ—â—å—é /new_case"
            )
            return

        case = await self.case_service.get_case(case_id)
        if not case:
            await update.message.reply_text(
                "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –¥–µ–ª–µ."
            )
            return

        locations_text = "–î–æ—Å—Ç—É–ø–Ω—ã–µ –ª–æ–∫–∞—Ü–∏–∏:\n\n"
        for location in case.locations:
            if location.discovered:
                locations_text += f"üìç {location.name}\n"
                locations_text += f"–£—Ä–æ–≤–µ–Ω—å —Ä–∏—Å–∫–∞: {location.risk_level}/10\n"
                description = await self.ai_service.generate_location_description(
                    case,
                    location,
                    [
                        ev
                        for ev in case.evidence
                        if ev.location_id == location.id and ev.discovered
                    ],
                )
                locations_text += f"{description}\n\n"
            else:
                locations_text += f"‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –ª–æ–∫–∞—Ü–∏—è\n\n"

        await update.message.reply_text(locations_text)

    async def hint_command(
        self, update: Update, context: ContextTypes.DEFAULT_TYPE
    ) -> None:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /hint"""
        user_id = update.effective_user.id
        case_id = self._user_states.get(user_id)

        if not case_id:
            await update.message.reply_text(
                "–°–Ω–∞—á–∞–ª–∞ –Ω–∞—á–Ω–∏—Ç–µ —Ä–∞—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ —Å –ø–æ–º–æ—â—å—é /new_case"
            )
            return

        case = await self.case_service.get_case(case_id)
        if not case:
            await update.message.reply_text(
                "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –¥–µ–ª–µ."
            )
            return

        discovered_evidence = [ev for ev in case.evidence if ev.discovered]
        current_progress = (
            len(discovered_evidence) / len(case.evidence) if case.evidence else 0
        )

        hint = await self.ai_service.generate_hint(
            case, current_progress, discovered_evidence
        )
        await update.message.reply_text(f"üí° –ü–æ–¥—Å–∫–∞–∑–∫–∞: {hint}")
