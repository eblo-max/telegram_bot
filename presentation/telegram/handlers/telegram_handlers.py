import logging
from dataclasses import dataclass
from typing import Dict, List, Optional, Callable
from uuid import UUID

from telegram import Update
from telegram.ext import ContextTypes

from dark_archive.application.interfaces.telegram_client import ITelegramClient
from dark_archive.application.interfaces.message_gateway import IMessageGateway
from dark_archive.domain.services.case_service import CaseService
from dark_archive.domain.value_objects.message import (
    OutboundMessage,
    Button,
    MessageFormat,
)

logger = logging.getLogger(__name__)


@dataclass
class TelegramHandlers:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ Telegram –±–æ—Ç–∞"""

    telegram_client: ITelegramClient
    case_service: CaseService
    message_gateway: IMessageGateway

    def get_handlers(self) -> List[Callable]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥

        Returns:
            List[Callable]: –°–ø–∏—Å–æ–∫ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
        """
        return [
            self.start_command,
            self.help_command,
            self.new_case_command,
            self.list_cases_command,
            self.case_info_command,
            self.button_handler,
        ]

    async def start_command(
        self, update: Update, context: ContextTypes.DEFAULT_TYPE
    ) -> None:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        welcome_message = OutboundMessage(
            recipient_id=str(update.effective_chat.id),
            content=(
                "üîç *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Dark Archive!*\n\n"
                "–Ø - –≤–∞—à –ø–æ–º–æ—â–Ω–∏–∫ –≤ —Ä–∞—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–∏ —Å–∞–º—ã—Ö –º—Ä–∞—á–Ω—ã—Ö –∏ –∑–∞–≥–∞–¥–æ—á–Ω—ã—Ö –¥–µ–ª.\n\n"
                "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
                "/new_case - –ù–∞—á–∞—Ç—å –Ω–æ–≤–æ–µ —Ä–∞—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ\n"
                "/list_cases - –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –¥–µ–ª\n"
                "/case <id> - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º –¥–µ–ª–µ\n"
                "/help - –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É"
            ),
            format=MessageFormat.MARKDOWN,
        )
        await self.telegram_client.send_message(
            update.effective_chat.id, welcome_message
        )

    async def help_command(
        self, update: Update, context: ContextTypes.DEFAULT_TYPE
    ) -> None:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
        help_message = OutboundMessage(
            recipient_id=str(update.effective_chat.id),
            content=(
                "üìñ *–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º:*\n\n"
                "üîç */new_case* - –ù–∞—á–∞—Ç—å –Ω–æ–≤–æ–µ —Ä–∞—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ\n"
                "üìã */list_cases* - –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –¥–µ–ª\n"
                "üìÅ */case <id>* - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º –¥–µ–ª–µ\n"
                "‚ùì */help* - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É\n\n"
                "_–î–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –ª–æ–∫–∞—Ü–∏—è–º–∏ –∏ —É–ª–∏–∫–∞–º–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –ø–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏._"
            ),
            format=MessageFormat.MARKDOWN,
        )
        await self.telegram_client.send_message(update.effective_chat.id, help_message)

    async def new_case_command(
        self, update: Update, context: ContextTypes.DEFAULT_TYPE
    ) -> None:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /new_case"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é –∫–ª–∏–µ–Ω—Ç–∞ –∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
            if not hasattr(self, "case_service") or self.case_service is None:
                logger.error("Case service not initialized")
                await self._send_error_message(
                    update.effective_chat.id,
                    "‚ùå –í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞: —Å–µ—Ä–≤–∏—Å –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω",
                )
                return

            logger.info(
                f"Starting new case creation for chat {update.effective_chat.id}"
            )

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è
            await self.telegram_client.send_message(
                update.effective_chat.id,
                OutboundMessage(
                    recipient_id=str(update.effective_chat.id),
                    content="‚è≥ –°–æ–∑–¥–∞—é –Ω–æ–≤–æ–µ —Ä–∞—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ... –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è.",
                    format=MessageFormat.MARKDOWN,
                ),
            )

            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ —Ä–∞—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ —Å–æ —Å—Ä–µ–¥–Ω–µ–π —Å–ª–æ–∂–Ω–æ—Å—Ç—å—é
            logger.debug("Calling case_service.create_case")
            case = await self.case_service.create_case(difficulty=5)

            if not case:
                logger.error("Failed to create case: returned None")
                await self._send_error_message(
                    update.effective_chat.id,
                    "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–µ –¥–µ–ª–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                )
                return

            logger.info(f"Case created successfully with ID: {case.id}")

            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –Ω–æ–≤–æ–º —Ä–∞—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–∏
            keyboard_buttons = [
                [
                    Button(
                        text="üîç –ò—Å—Å–ª–µ–¥–æ–≤–∞—Ç—å –ª–æ–∫–∞—Ü–∏—é",
                        callback_data=f"explore_{case.id}",
                    ),
                    Button(
                        text="üó∫ –ö–∞—Ä—Ç–∞ –ª–æ–∫–∞—Ü–∏–π",
                        callback_data=f"locations_{case.id}",
                    ),
                ],
                [
                    Button(
                        text="üîÆ –£–ª–∏–∫–∏",
                        callback_data=f"evidence_{case.id}",
                    ),
                    Button(
                        text="üìù –ê–Ω–∞–ª–∏–∑",
                        callback_data=f"analyze_{case.id}",
                    ),
                ],
            ]

            message = OutboundMessage(
                recipient_id=str(update.effective_chat.id),
                content=(
                    f"üóÇ *–ù–æ–≤–æ–µ –¥–µ–ª–æ #{case.id}*\n\n"
                    f"*–ù–∞–∑–≤–∞–Ω–∏–µ:* {case.title}\n"
                    f"*–û–ø–∏—Å–∞–Ω–∏–µ:* {case.description}\n\n"
                    "_–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –¥–µ–ª–æ–º_"
                ),
                format=MessageFormat.MARKDOWN,
                keyboard_buttons=keyboard_buttons,
            )
            await self.telegram_client.send_message(update.effective_chat.id, message)
            logger.info(f"New case information sent to chat {update.effective_chat.id}")

        except TypeError as e:
            logger.error(f"Type error in new_case_command: {str(e)}", exc_info=True)
            await self._send_error_message(
                update.effective_chat.id,
                "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –¥–µ–ª–∞: –Ω–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Ç–∏–ø–æ–≤ –¥–∞–Ω–Ω—ã—Ö",
            )
        except AttributeError as e:
            logger.error(
                f"Attribute error in new_case_command: {str(e)}", exc_info=True
            )
            await self._send_error_message(
                update.effective_chat.id,
                "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –¥–µ–ª–∞: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–π –∞—Ç—Ä–∏–±—É—Ç",
            )
        except ValueError as e:
            logger.error(f"Value error in new_case_command: {str(e)}", exc_info=True)
            await self._send_error_message(
                update.effective_chat.id,
                "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –¥–µ–ª–∞: –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ",
            )
        except Exception as e:
            logger.error(
                f"Unexpected error in new_case_command: {str(e)}", exc_info=True
            )
            await self._send_error_message(
                update.effective_chat.id, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –Ω–æ–≤–æ–≥–æ –¥–µ–ª–∞"
            )

    async def _send_error_message(self, chat_id: int, message: str) -> None:
        """–í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –æ–± –æ—à–∏–±–∫–∞—Ö"""
        try:
            error_message = OutboundMessage(
                recipient_id=str(chat_id),
                content=message,
                format=MessageFormat.MARKDOWN,
            )
            await self.telegram_client.send_message(chat_id, error_message)
        except Exception as e:
            logger.error(f"Failed to send error message: {e}", exc_info=True)

    async def list_cases_command(
        self, update: Update, context: ContextTypes.DEFAULT_TYPE
    ) -> None:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /list_cases"""
        try:
            logger.info(f"Listing cases for chat {update.effective_chat.id}")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é —Å–µ—Ä–≤–∏—Å–∞
            if not hasattr(self, "case_service") or self.case_service is None:
                logger.error("Case service not initialized")
                await self._send_error_message(
                    update.effective_chat.id,
                    "‚ùå –í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞: —Å–µ—Ä–≤–∏—Å –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω",
                )
                return

            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–µ–ª
            logger.debug("Calling case_service.list_cases")
            cases = await self.case_service.list_cases()
            logger.info(f"Retrieved {len(cases)} cases")

            if not cases:
                logger.info("No cases found")
                message = OutboundMessage(
                    recipient_id=str(update.effective_chat.id),
                    content="üì≠ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ä–∞—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–π.\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /new_case —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –Ω–æ–≤–æ–µ!",
                    format=MessageFormat.HTML,
                )
            else:
                cases_text = "\n\n".join(
                    f"üóÇ <b>–î–µ–ª–æ ‚Ññ{case.id}</b>\n"
                    f"<b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {case.title}\n"
                    f"<b>–°—Ç–∞—Ç—É—Å:</b> {'üü¢' if case.status == 'active' else 'üî¥'}\n"
                    f"<b>–ü—Ä–æ–≥—Ä–µ—Å—Å:</b> {case.progress * 100:.1f}%"
                    for case in cases
                )

                message = OutboundMessage(
                    recipient_id=str(update.effective_chat.id),
                    content=f"üìã <b>–°–ø–∏—Å–æ–∫ —Ä–∞—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–π:</b>\n\n{cases_text}\n\n"
                    f"<i>–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /case &lt;id&gt; –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–µ—Ç–∞–ª–µ–π</i>",
                    format=MessageFormat.HTML,
                )

            await self.telegram_client.send_message(update.effective_chat.id, message)
            logger.info(f"Cases list sent to chat {update.effective_chat.id}")

        except Exception as e:
            logger.error(f"Error in list_cases_command: {str(e)}", exc_info=True)
            await self._send_error_message(
                update.effective_chat.id,
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —Ä–∞—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–π",
            )

    async def case_info_command(
        self, update: Update, context: ContextTypes.DEFAULT_TYPE
    ) -> None:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /case"""
        try:
            logger.info(f"Retrieving case info for chat {update.effective_chat.id}")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é —Å–µ—Ä–≤–∏—Å–∞
            if not hasattr(self, "case_service") or self.case_service is None:
                logger.error("Case service not initialized")
                await self._send_error_message(
                    update.effective_chat.id,
                    "‚ùå –í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞: —Å–µ—Ä–≤–∏—Å –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω",
                )
                return

            # –ü–æ–ª—É—á–∞–µ–º ID –¥–µ–ª–∞ –∏–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥—ã
            if not context.args:
                logger.warning("No case ID provided")
                error_message = OutboundMessage(
                    recipient_id=str(update.effective_chat.id),
                    content="‚ùå –£–∫–∞–∂–∏—Ç–µ ID –¥–µ–ª–∞: /case <id>",
                    format=MessageFormat.MARKDOWN,
                )
                await self.telegram_client.send_message(
                    update.effective_chat.id, error_message
                )
                return

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç ID
            try:
                case_id = UUID(context.args[0])
                logger.debug(f"Parsed case ID: {case_id}")
            except ValueError:
                logger.warning(f"Invalid case ID format: {context.args[0]}")
                error_message = OutboundMessage(
                    recipient_id=str(update.effective_chat.id),
                    content="‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID –¥–µ–ª–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç UUID.",
                    format=MessageFormat.MARKDOWN,
                )
                await self.telegram_client.send_message(
                    update.effective_chat.id, error_message
                )
                return

            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–∞—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–∏
            logger.debug(f"Calling case_service.get_case for ID {case_id}")
            case = await self.case_service.get_case(case_id)

            if not case:
                logger.warning(f"Case with ID {case_id} not found")
                error_message = OutboundMessage(
                    recipient_id=str(update.effective_chat.id),
                    content=f"‚ùå –î–µ–ª–æ #{case_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ",
                    format=MessageFormat.MARKDOWN,
                )
                await self.telegram_client.send_message(
                    update.effective_chat.id, error_message
                )
                return

            logger.info(f"Retrieved case {case_id}")

            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –¥–µ–ª–µ
            keyboard_buttons = [
                [
                    Button(
                        text="üîç –ò—Å—Å–ª–µ–¥–æ–≤–∞—Ç—å –ª–æ–∫–∞—Ü–∏—é",
                        callback_data=f"explore_{case.id}",
                    ),
                    Button(
                        text="üó∫ –ö–∞—Ä—Ç–∞ –ª–æ–∫–∞—Ü–∏–π",
                        callback_data=f"locations_{case.id}",
                    ),
                ],
                [
                    Button(
                        text="üîÆ –£–ª–∏–∫–∏",
                        callback_data=f"evidence_{case.id}",
                    ),
                    Button(
                        text="üìù –ê–Ω–∞–ª–∏–∑",
                        callback_data=f"analyze_{case.id}",
                    ),
                ],
            ]

            message = OutboundMessage(
                recipient_id=str(update.effective_chat.id),
                content=(
                    f"üóÇ *–î–µ–ª–æ #{case.id}*\n\n"
                    f"*–ù–∞–∑–≤–∞–Ω–∏–µ:* {case.title}\n"
                    f"*–û–ø–∏—Å–∞–Ω–∏–µ:* {case.description}\n"
                    f"*–°—Ç–∞—Ç—É—Å:* {'üü¢ –ê–∫—Ç–∏–≤–Ω–æ' if case.status == 'active' else 'üî¥ –ó–∞–∫—Ä—ã—Ç–æ'}\n"
                    f"*–ü—Ä–æ–≥—Ä–µ—Å—Å:* {case.progress * 100:.1f}%\n\n"
                    "_–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –¥–µ–ª–æ–º_"
                ),
                format=MessageFormat.MARKDOWN,
                keyboard_buttons=keyboard_buttons,
            )
            await self.telegram_client.send_message(update.effective_chat.id, message)
            logger.info(f"Case info sent to chat {update.effective_chat.id}")

        except ValueError as e:
            logger.error(f"Value error in case_info_command: {str(e)}", exc_info=True)
            await self._send_error_message(
                update.effective_chat.id, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID –¥–µ–ª–∞"
            )
        except Exception as e:
            logger.error(f"Error in case_info_command: {str(e)}", exc_info=True)
            await self._send_error_message(
                update.effective_chat.id,
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –¥–µ–ª–µ",
            )

    async def button_handler(
        self, update: Update, context: ContextTypes.DEFAULT_TYPE
    ) -> None:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏"""
        query = update.callback_query
        if not query:
            return

        try:
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ callback_data
            callback_data = query.data
            parts = callback_data.split("_")

            # –î–æ–ª–∂–Ω–æ –±—ã—Ç—å –º–∏–Ω–∏–º—É–º 2 —á–∞—Å—Ç–∏: –¥–µ–π—Å—Ç–≤–∏–µ –∏ id –¥–µ–ª–∞
            if len(parts) < 2:
                await self.telegram_client.answer_callback(
                    query.id, text="‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö"
                )
                return

            action = parts[0]
            case_id_str = parts[1]

            try:
                # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ–ª–Ω—ã–π UUID –∏–∑ –ø–µ—Ä–≤—ã—Ö 8 —Å–∏–º–≤–æ–ª–æ–≤
                case = await self.case_service.get_case(UUID(case_id_str))
                if not case:
                    await self.telegram_client.answer_callback(
                        query.id, text="‚ùå –î–µ–ª–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"
                    )
                    return
                case_id = case.id
            except ValueError:
                await self.telegram_client.answer_callback(
                    query.id, text="‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID –¥–µ–ª–∞"
                )
                return

            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
            if action == "explore":
                await self._handle_explore(update, case_id)
            elif action == "locations":
                await self._handle_show_locations(update, case_id)
            elif action == "evidence":
                await self._handle_show_evidence(update, case_id)
            elif action == "analyze":
                await self._handle_analyze(update, case_id)
            elif action == "loc":
                # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –ª–æ–∫–∞—Ü–∏–∏
                if len(parts) < 3:
                    await self.telegram_client.answer_callback(
                        query.id, text="‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö –ª–æ–∫–∞—Ü–∏–∏"
                    )
                    return
                location_id_str = parts[2]
                try:
                    # –ù–∞—Ö–æ–¥–∏–º –ª–æ–∫–∞—Ü–∏—é –ø–æ –ø–µ—Ä–≤—ã–º 8 —Å–∏–º–≤–æ–ª–∞–º UUID
                    location = next(
                        (
                            loc
                            for loc in case.locations
                            if str(loc.id)[:8] == location_id_str
                        ),
                        None,
                    )
                    if not location:
                        await self.telegram_client.answer_callback(
                            query.id, text="‚ùå –õ–æ–∫–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
                        )
                        return
                    await self._handle_location(update, case_id, location.id)
                except ValueError:
                    await self.telegram_client.answer_callback(
                        query.id, text="‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID –ª–æ–∫–∞—Ü–∏–∏"
                    )
            elif action == "case":
                # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –¥–µ–ª—É
                await self.case_info_command(update, context)
            elif action == "analyze_evidence":
                # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —É–ª–∏–∫–∏
                if len(parts) < 3:
                    await self.telegram_client.answer_callback(
                        query.id, text="‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö —É–ª–∏–∫–∏"
                    )
                    return
                evidence_id_str = parts[2]
                try:
                    # –ù–∞—Ö–æ–¥–∏–º —É–ª–∏–∫—É –ø–æ –ø–µ—Ä–≤—ã–º 8 —Å–∏–º–≤–æ–ª–∞–º UUID
                    evidence = next(
                        (
                            ev
                            for loc in case.locations
                            for ev in loc.evidence
                            if str(ev.id)[:8] == evidence_id_str
                        ),
                        None,
                    )
                    if not evidence:
                        await self.telegram_client.answer_callback(
                            query.id, text="‚ùå –£–ª–∏–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
                        )
                        return
                    await self._handle_analyze_evidence(update, case_id, evidence.id)
                except ValueError:
                    await self.telegram_client.answer_callback(
                        query.id, text="‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID —É–ª–∏–∫–∏"
                    )
            else:
                await self.telegram_client.answer_callback(
                    query.id, text="‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ"
                )

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ callback: {str(e)}", exc_info=True)
            await self.telegram_client.answer_callback(
                query.id, text="‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞"
            )

    async def _handle_explore(self, update: Update, case_id: UUID) -> None:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è –ª–æ–∫–∞—Ü–∏–π"""
        try:
            logger.info(f"Starting location exploration for case {case_id}")

            # –ü–æ–ª—É—á–∞–µ–º –¥–µ–ª–æ
            case = await self.case_service.get_case(case_id)
            if not case:
                logger.error(f"Case {case_id} not found")
                await self.telegram_client.send_message(
                    update.effective_chat.id,
                    OutboundMessage(
                        recipient_id=str(update.effective_chat.id),
                        content="‚ùå –î–µ–ª–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ",
                    ),
                )
                return

            logger.debug(
                f"Found case: {case.title} with {len(case.locations)} locations"
            )

            # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–π –ª–æ–∫–∞—Ü–∏–∏
            location_buttons = []
            available_locations = [loc for loc in case.locations if loc.is_available]

            for location in available_locations:
                logger.debug(f"Adding button for location: {location.name}")
                row = [
                    Button(
                        text=f"üìç {location.name}",
                        callback_data=f"loc_{str(case_id)[:8]}_{str(location.id)[:8]}",
                    )
                ]
                location_buttons.append(row)

            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤–æ–∑–≤—Ä–∞—Ç–∞
            location_buttons.append(
                [
                    Button(
                        text="üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –¥–µ–ª—É",
                        callback_data=f"case_{str(case_id)[:8]}",
                    )
                ]
            )

            logger.debug(f"Created {len(location_buttons)} button rows")

            message = OutboundMessage(
                recipient_id=str(update.effective_chat.id),
                content=(
                    f"üó∫ *–î–æ—Å—Ç—É–ø–Ω—ã–µ –ª–æ–∫–∞—Ü–∏–∏*\n\n"
                    f"–í—ã–±–µ—Ä–∏—Ç–µ –ª–æ–∫–∞—Ü–∏—é –¥–ª—è –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è:\n"
                    f"–í—Å–µ–≥–æ –ª–æ–∫–∞—Ü–∏–π: {len(case.locations)}\n"
                    f"–î–æ—Å—Ç—É–ø–Ω–æ: {len(available_locations)}"
                ),
                format=MessageFormat.MARKDOWN,
                keyboard_buttons=location_buttons,
            )

            logger.info(f"Sending location list to chat {update.effective_chat.id}")
            await self.telegram_client.send_message(update.effective_chat.id, message)
            logger.info("Location list sent successfully")

        except Exception as e:
            logger.error(f"Error in _handle_explore: {str(e)}", exc_info=True)
            error_message = OutboundMessage(
                recipient_id=str(update.effective_chat.id),
                content="‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –ª–æ–∫–∞—Ü–∏–π. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            )
            await self.telegram_client.send_message(
                update.effective_chat.id, error_message
            )

    async def _handle_show_locations(self, update: Update, case_id: UUID) -> None:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–∫–∞–∑–∞ –∫–∞—Ä—Ç—ã –ª–æ–∫–∞—Ü–∏–π"""
        case = await self.case_service.get_case(case_id)
        if not case:
            await self.telegram_client.send_message(
                update.effective_chat.id,
                OutboundMessage(
                    recipient_id=str(update.effective_chat.id),
                    content="‚ùå –î–µ–ª–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ",
                ),
            )
            return

        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –ª–æ–∫–∞—Ü–∏–π
        locations_text = "\n\n".join(
            f"üîç *{loc.name}*\n"
            f"_{loc.description}_\n"
            f"–£—Ä–æ–≤–µ–Ω—å —Ä–∏—Å–∫–∞: {'üî¥' if loc.risk_level > 7 else 'üü°' if loc.risk_level > 3 else 'üü¢'}"
            for loc in case.locations
        )

        message = OutboundMessage(
            recipient_id=str(update.effective_chat.id),
            content=f"üó∫ *–ö–∞—Ä—Ç–∞ –ª–æ–∫–∞—Ü–∏–π:*\n\n{locations_text}",
            format=MessageFormat.MARKDOWN,
        )
        await self.telegram_client.send_message(update.effective_chat.id, message)

    async def _handle_show_evidence(self, update: Update, case_id: UUID) -> None:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–∫–∞–∑–∞ —Å–ø–∏—Å–∫–∞ —É–ª–∏–∫"""
        try:
            logger.info(f"Showing evidence for case {case_id}")

            case = await self.case_service.get_case(case_id)
            if not case:
                logger.error(f"Case {case_id} not found")
                await self._send_error_message(
                    update.effective_chat.id,
                    "‚ùå –î–µ–ª–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ",
                )
                return

            # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ —É–ª–∏–∫–∏ –∏–∑ –ª–æ–∫–∞—Ü–∏–π
            evidence_list = []
            evidence_buttons = []

            for location in case.locations:
                for evidence in location.evidence:
                    evidence_list.append(
                        f"üîç *{evidence.name}*\n"
                        f"_{evidence.description}_\n"
                        f"–ù–∞–π–¥–µ–Ω–æ –≤: {location.name}"
                    )

                    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —É–ª–∏–∫–∏
                    row = [
                        Button(
                            text=f"üîç {evidence.name}",
                            callback_data=f"analyze_evidence_{str(case_id)[:8]}_{str(evidence.id)[:8]}",
                        )
                    ]
                    evidence_buttons.append(row)

            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
            navigation_buttons = [
                [
                    Button(
                        text="üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –¥–µ–ª—É",
                        callback_data=f"case_{str(case_id)[:8]}",
                    )
                ]
            ]
            evidence_buttons.extend(navigation_buttons)

            if not evidence_list:
                message = OutboundMessage(
                    recipient_id=str(update.effective_chat.id),
                    content="üîç *–°–ø–∏—Å–æ–∫ —É–ª–∏–∫ –ø—É—Å—Ç*\n\n_–ò—Å—Å–ª–µ–¥—É–π—Ç–µ –ª–æ–∫–∞—Ü–∏–∏, —á—Ç–æ–±—ã –Ω–∞–π—Ç–∏ —É–ª–∏–∫–∏_",
                    format=MessageFormat.MARKDOWN,
                    keyboard_buttons=navigation_buttons,
                )
            else:
                evidence_text = "\n\n".join(evidence_list)
                message = OutboundMessage(
                    recipient_id=str(update.effective_chat.id),
                    content=f"üîç *–ù–∞–π–¥–µ–Ω–Ω—ã–µ —É–ª–∏–∫–∏:*\n\n{evidence_text}",
                    format=MessageFormat.MARKDOWN,
                    keyboard_buttons=evidence_buttons,
                )

            logger.info(f"Sending evidence list to chat {update.effective_chat.id}")
            await self.telegram_client.send_message(update.effective_chat.id, message)
            logger.info("Evidence list sent successfully")

        except Exception as e:
            logger.error(f"Error in _handle_show_evidence: {str(e)}", exc_info=True)
            await self._send_error_message(
                update.effective_chat.id,
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ —É–ª–∏–∫. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            )

    async def _handle_analyze(self, update: Update, case_id: UUID) -> None:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —É–ª–∏–∫"""
        try:
            logger.info(f"Starting evidence analysis for case {case_id}")

            case = await self.case_service.get_case(case_id)
            if not case:
                logger.error(f"Case {case_id} not found")
                await self._send_error_message(
                    update.effective_chat.id,
                    "‚ùå –î–µ–ª–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ",
                )
                return

            # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –Ω–∞–π–¥–µ–Ω–Ω—ã–µ —É–ª–∏–∫–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
            evidence_buttons = []
            for location in case.locations:
                for evidence in location.evidence:
                    if evidence.is_discovered:
                        row = [
                            Button(
                                text=f"üîç {evidence.name}",
                                callback_data=f"analyze_evidence_{str(case_id)[:8]}_{str(evidence.id)[:8]}",
                            )
                        ]
                        evidence_buttons.append(row)

            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
            navigation_buttons = [
                [
                    Button(
                        text="üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –¥–µ–ª—É",
                        callback_data=f"case_{str(case_id)[:8]}",
                    )
                ]
            ]
            evidence_buttons.extend(navigation_buttons)

            if not evidence_buttons:
                message = OutboundMessage(
                    recipient_id=str(update.effective_chat.id),
                    content="üîç *–ù–µ—Ç —É–ª–∏–∫ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞*\n\n_–ò—Å—Å–ª–µ–¥—É–π—Ç–µ –ª–æ–∫–∞—Ü–∏–∏, —á—Ç–æ–±—ã –Ω–∞–π—Ç–∏ —É–ª–∏–∫–∏_",
                    format=MessageFormat.MARKDOWN,
                    keyboard_buttons=navigation_buttons,
                )
            else:
                message = OutboundMessage(
                    recipient_id=str(update.effective_chat.id),
                    content="üîç *–í—ã–±–µ—Ä–∏—Ç–µ —É–ª–∏–∫—É –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞:*",
                    format=MessageFormat.MARKDOWN,
                    keyboard_buttons=evidence_buttons,
                )

            logger.info(f"Sending analysis options to chat {update.effective_chat.id}")
            await self.telegram_client.send_message(update.effective_chat.id, message)
            logger.info("Analysis options sent successfully")

        except Exception as e:
            logger.error(f"Error in _handle_analyze: {str(e)}", exc_info=True)
            await self._send_error_message(
                update.effective_chat.id,
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ —É–ª–∏–∫. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            )

    async def _handle_location(
        self, update: Update, case_id: UUID, location_id: UUID
    ) -> None:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –ª–æ–∫–∞—Ü–∏–∏"""
        try:
            logger.info(
                f"Starting location exploration for case {case_id}, location {location_id}"
            )

            # –ü–æ–ª—É—á–∞–µ–º –¥–µ–ª–æ
            case = await self.case_service.get_case(case_id)
            if not case:
                logger.error(f"Case {case_id} not found")
                await self._send_error_message(
                    update.effective_chat.id,
                    "‚ùå –î–µ–ª–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ",
                )
                return

            # –ù–∞—Ö–æ–¥–∏–º –ª–æ–∫–∞—Ü–∏—é
            location = next(
                (loc for loc in case.locations if loc.id == location_id), None
            )
            if not location:
                logger.error(f"Location {location_id} not found in case {case_id}")
                await self._send_error_message(
                    update.effective_chat.id,
                    "‚ùå –õ–æ–∫–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞",
                )
                return

            logger.debug(f"Found location: {location.name}")

            # –ü–æ–ª—É—á–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –ª–æ–∫–∞—Ü–∏–∏
            try:
                description = await self.case_service.generate_location_description(
                    case, location, case.discovered_evidence
                )
                logger.debug("Generated location description")
            except Exception as e:
                logger.error(f"Error generating location description: {e}")
                description = location.description

            # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è —É–ª–∏–∫
            evidence_buttons = []
            undiscovered_evidence = [
                ev for ev in location.evidence if not ev.is_discovered
            ]

            for evidence in undiscovered_evidence:
                logger.debug(f"Adding button for evidence: {evidence.name}")
                row = [
                    Button(
                        text=f"üîç {evidence.name}",
                        callback_data=f"analyze_evidence_{str(case_id)[:8]}_{str(evidence.id)[:8]}",
                    )
                ]
                evidence_buttons.append(row)

            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
            navigation_buttons = [
                [
                    Button(
                        text="üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Å–ø–∏—Å–∫—É –ª–æ–∫–∞—Ü–∏–π",
                        callback_data=f"explore_{str(case_id)[:8]}",
                    )
                ],
                [
                    Button(
                        text="üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –¥–µ–ª—É",
                        callback_data=f"case_{str(case_id)[:8]}",
                    )
                ],
            ]
            evidence_buttons.extend(navigation_buttons)

            logger.debug(f"Created {len(evidence_buttons)} button rows")

            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            message = OutboundMessage(
                recipient_id=str(update.effective_chat.id),
                content=(
                    f"üìç *{location.name}*\n\n"
                    f"{description}\n\n"
                    f"*–£—Ä–æ–≤–µ–Ω—å —Ä–∏—Å–∫–∞:* {'‚ö†Ô∏è' * location.risk_level}\n"
                    f"*–ù–∞–π–¥–µ–Ω–æ —É–ª–∏–∫:* {len([ev for ev in location.evidence if ev.is_discovered])}\n"
                    f"*–î–æ—Å—Ç—É–ø–Ω–æ –¥–ª—è –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è:* {len(undiscovered_evidence)}"
                ),
                format=MessageFormat.MARKDOWN,
                keyboard_buttons=evidence_buttons,
            )

            logger.info(f"Sending location details to chat {update.effective_chat.id}")
            await self.telegram_client.send_message(update.effective_chat.id, message)
            logger.info("Location details sent successfully")

        except Exception as e:
            logger.error(f"Error in _handle_location: {str(e)}", exc_info=True)
            await self._send_error_message(
                update.effective_chat.id,
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–∏ –ª–æ–∫–∞—Ü–∏–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            )

    async def _handle_analyze_evidence(
        self, update: Update, case_id: UUID, evidence_id: UUID
    ) -> None:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —É–ª–∏–∫–∏"""
        try:
            logger.info(
                f"Starting evidence analysis for case {case_id}, evidence {evidence_id}"
            )

            case = await self.case_service.get_case(case_id)
            if not case:
                logger.error(f"Case {case_id} not found")
                await self._send_error_message(
                    update.effective_chat.id,
                    "‚ùå –î–µ–ª–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ",
                )
                return

            # –ù–∞—Ö–æ–¥–∏–º —É–ª–∏–∫—É
            evidence = next(
                (
                    ev
                    for loc in case.locations
                    for ev in loc.evidence
                    if ev.id == evidence_id
                ),
                None,
            )
            if not evidence:
                logger.error(f"Evidence {evidence_id} not found in case {case_id}")
                await self._send_error_message(
                    update.effective_chat.id,
                    "‚ùå –£–ª–∏–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞",
                )
                return

            logger.debug(f"Found evidence: {evidence.name}")

            # –ü–æ–ª—É—á–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ —É–ª–∏–∫–∏
            try:
                description = await self.case_service.generate_evidence_description(
                    case, evidence, case.discovered_evidence
                )
                logger.debug("Generated evidence description")
            except Exception as e:
                logger.error(f"Error generating evidence description: {e}")
                description = evidence.description

            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —É–ª–∏–∫–µ
            message = OutboundMessage(
                recipient_id=str(update.effective_chat.id),
                content=(
                    f"üîç *–£–ª–∏–∫–∞ #{evidence.id}*\n\n"
                    f"*–ù–∞–∑–≤–∞–Ω–∏–µ:* {evidence.name}\n"
                    f"*–û–ø–∏—Å–∞–Ω–∏–µ:* {description}\n"
                    f"*–ù–∞–π–¥–µ–Ω–æ –≤:* {evidence.location.name}\n"
                    f"*–°—Ç–∞—Ç—É—Å:* {'üü¢ –ê–∫—Ç–∏–≤–Ω–æ' if evidence.is_discovered else 'üî¥ –ó–∞–∫—Ä—ã—Ç–æ'}"
                ),
                format=MessageFormat.MARKDOWN,
            )
            await self.telegram_client.send_message(update.effective_chat.id, message)
            logger.info(f"Evidence info sent to chat {update.effective_chat.id}")

        except Exception as e:
            logger.error(f"Error in _handle_analyze_evidence: {str(e)}", exc_info=True)
            await self._send_error_message(
                update.effective_chat.id,
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —É–ª–∏–∫–µ",
            )
